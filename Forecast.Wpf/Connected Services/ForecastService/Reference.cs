//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Forecast.Wpf.ForecastService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="City", Namespace="http://schemas.datacontract.org/2004/07/Forecast.Core.Models")]
    [System.SerializableAttribute()]
    public partial class City : Forecast.Wpf.ForecastService.Entity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Forecast.Wpf.ForecastService.Weather[] WeathersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Forecast.Wpf.ForecastService.Weather[] Weathers {
            get {
                return this.WeathersField;
            }
            set {
                if ((object.ReferenceEquals(this.WeathersField, value) != true)) {
                    this.WeathersField = value;
                    this.RaisePropertyChanged("Weathers");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Entity", Namespace="http://schemas.datacontract.org/2004/07/Forecast.Core.Models")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Forecast.Wpf.ForecastService.Weather))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Forecast.Wpf.ForecastService.WeatherType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Forecast.Wpf.ForecastService.City))]
    public partial class Entity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Weather", Namespace="http://schemas.datacontract.org/2004/07/Forecast.Core.Models")]
    [System.SerializableAttribute()]
    public partial class Weather : Forecast.Wpf.ForecastService.Entity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Forecast.Wpf.ForecastService.WeatherType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedOn {
            get {
                return this.CreatedOnField;
            }
            set {
                if ((this.CreatedOnField.Equals(value) != true)) {
                    this.CreatedOnField = value;
                    this.RaisePropertyChanged("CreatedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Forecast.Wpf.ForecastService.WeatherType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WeatherType", Namespace="http://schemas.datacontract.org/2004/07/Forecast.Core.Models")]
    [System.SerializableAttribute()]
    public partial class WeatherType : Forecast.Wpf.ForecastService.Entity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ForecastService.IForecastService")]
    public interface IForecastService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IForecastService/GetCities", ReplyAction="http://tempuri.org/IForecastService/GetCitiesResponse")]
        Forecast.Wpf.ForecastService.City[] GetCities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IForecastService/GetCities", ReplyAction="http://tempuri.org/IForecastService/GetCitiesResponse")]
        System.Threading.Tasks.Task<Forecast.Wpf.ForecastService.City[]> GetCitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IForecastService/GetWeather", ReplyAction="http://tempuri.org/IForecastService/GetWeatherResponse")]
        Forecast.Wpf.ForecastService.Weather[] GetWeather(int cityId, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IForecastService/GetWeather", ReplyAction="http://tempuri.org/IForecastService/GetWeatherResponse")]
        System.Threading.Tasks.Task<Forecast.Wpf.ForecastService.Weather[]> GetWeatherAsync(int cityId, System.DateTime date);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IForecastServiceChannel : Forecast.Wpf.ForecastService.IForecastService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ForecastServiceClient : System.ServiceModel.ClientBase<Forecast.Wpf.ForecastService.IForecastService>, Forecast.Wpf.ForecastService.IForecastService {
        
        public ForecastServiceClient() {
        }
        
        public ForecastServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ForecastServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ForecastServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ForecastServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Forecast.Wpf.ForecastService.City[] GetCities() {
            return base.Channel.GetCities();
        }
        
        public System.Threading.Tasks.Task<Forecast.Wpf.ForecastService.City[]> GetCitiesAsync() {
            return base.Channel.GetCitiesAsync();
        }
        
        public Forecast.Wpf.ForecastService.Weather[] GetWeather(int cityId, System.DateTime date) {
            return base.Channel.GetWeather(cityId, date);
        }
        
        public System.Threading.Tasks.Task<Forecast.Wpf.ForecastService.Weather[]> GetWeatherAsync(int cityId, System.DateTime date) {
            return base.Channel.GetWeatherAsync(cityId, date);
        }
    }
}
